{"version":3,"sources":["components/TodoList/TodoList.jsx","types.js","API/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","propTypes","number","isRequired","string","bool","state","titleFilter","filterBy","changeFilter","event","target","name","value","setState","this","props","todos","selectedUser","selectedUserId","filteredTodos","filter","todo","title","includes","String","completed","className","type","onChange","selected","map","key","id","classNames","readOnly","userId","onClick","React","PureComponent","API_URL","getTodos","a","fetch","response","json","data","getUserInfo","user","Error","CurrentUser","getUser","prevProps","clearSelectedUser","email","phone","Component","App","then","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c0681f9.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\nimport { TodoType } from '../../types';\nimport './TodoList.scss';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    titleFilter: '',\n    filterBy: 'all',\n  }\n\n  changeFilter = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { todos, selectedUser, selectedUserId } = this.props;\n    const { titleFilter, filterBy } = this.state;\n    const filteredTodos = todos.filter(\n      todo => (todo.title && todo.title.includes(titleFilter))\n       && ((String(todo.completed) === filterBy) || filterBy === 'all'),\n    );\n\n    return (\n      <div className=\"TodoList\">\n        <input\n          type=\"text\"\n          name=\"titleFilter\"\n          value={this.state.titleFilter}\n          onChange={this.changeFilter}\n        />\n\n        <select name=\"filterBy\" onChange={this.changeFilter}>\n          <option value=\"all\" selected>\n            All\n          </option>\n\n          <option value=\"false\">\n            Active\n          </option>\n\n          <option value=\"true\">\n            Completed\n          </option>\n        </select>\n\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  `TodoList__item--${todo.completed ? 'checked' : 'unchecked'}`,\n                )}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    `TodoList__user-button${\n                      selectedUserId === todo.userId && '--selected'\n                    }`,\n                    'button',\n                  )}\n                  type=\"button\"\n                  onClick={() => selectedUser(todo.userId)}\n                >\n                  User&nbsp;\n                  {`#${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: propTypes.arrayOf(propTypes.shape(TodoType)).isRequired,\n  selectedUser: propTypes.func.isRequired,\n  selectedUserId: propTypes.number.isRequired,\n};\n","import propTypes from 'prop-types';\n\nexport const TodoType = {\n  id: propTypes.number.isRequired,\n  userId: propTypes.number.isRequired,\n  title: propTypes.string.isRequired,\n  completed: propTypes.bool.isRequired,\n};\n","const API_URL = 'https://mate-api.herokuapp.com';\n\nexport const getTodos = async() => {\n  try {\n    const response = await fetch(`${API_URL}/todos`);\n    const todos = await response.json();\n\n    return todos.data;\n  } catch {\n    return 'Something went wrong...';\n  }\n};\n\nexport async function getUserInfo(userId) {\n  try {\n    const response = await fetch(`${API_URL}/users/${userId}`);\n    const user = await response.json();\n\n    return user.data ? user.data : Error('User does not exist');\n  } catch (error) {\n    return new Error(error);\n  }\n}\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUserInfo } from '../../API/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  async componentDidMount() {\n    this.getUser();\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUser();\n    }\n  }\n\n  getUser = async() => {\n    const user = await getUserInfo(this.props.userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  render() {\n    const { clearSelectedUser } = this.props;\n    const { user } = this.state;\n\n    return user ? (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n\n        <button\n          type=\"button\"\n          className=\"button__clear\"\n          onClick={clearSelectedUser}\n        >\n          Clear\n        </button>\n      </div>\n    ) : (\n      <p>Loading...</p>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  clearSelectedUser: propTypes.func.isRequired,\n  userId: propTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './API/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  selectedUser = (id) => {\n    this.setState({\n      selectedUserId: id,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUser={this.selectedUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId > 0 ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}